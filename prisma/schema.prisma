// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole         @default(STUDENT)
  EnrolledCourse EnrolledCourse[]
  createdCourses Course[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CoursesLevel {
  Beginner
  Intermediate
  Advanced
}

model Category {
  slug    String   @id
  name    String
  courses Course[]
}

enum PublicAccess {
  Private
  Public
}

model Course {
  id            String       @id @default(cuid())
  title         String
  author_id     String
  author        User         @relation(fields: [author_id], references: [id])
  slug          String
  public_access PublicAccess @default(Public)
  imageUrl      String?
  description   String?      @db.String
  level         CoursesLevel @default(Beginner)
  is_published  Boolean      @default(false)

  category_id String?
  category    Category? @relation(fields: [category_id], references: [slug])

  chapters         Chapter[]
  enrolled_courses EnrolledCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug, title, public_access, author_id, category_id, createdAt])
}

model Chapter {
  id           String         @id @default(cuid())
  title        String
  courseId     String
  description  String         @db.String
  video_url    String
  is_published Boolean        @default(false)
  position     Int
  userProgress UserProgress[]

  Course Course @relation(fields: [courseId], references: [id])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model EnrolledCourse {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  enrolledAt DateTime @default(now())
  progress   Float?
  completed  Boolean  @default(false)
}
